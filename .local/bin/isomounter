#!/usr/bin/env ruby

target_image = ARGV[0].strip
request      = ARGV[1]&.strip

ARGV.clear

# mount & unmount method
def mount_process(request, target_image)
  username     = `echo $USER`&.strip
  target_path  = "/run/media/#{username}"
  target_label = `file '#{target_image}' | cut -d \\\' -f2`&.strip
  if request == 'm'
    system "
    if [[ ! -d #{target_path}/#{target_label} ]]; then
      sudo mkdir -p #{target_path}/#{target_label}
      sudo mount -l -o loop '#{target_image}' #{target_path}/#{target_label} 1> /dev/null 2>&1
      echo '=> MOUNTED on #{target_path}/#{target_label}'
    elif [[ -d #{target_path}/#{target_label} ]]; then
      sudo mount -l -o loop '#{target_image}' #{target_path}/#{target_label} 1> /dev/null 2>&1
      echo '=> MOUNTED on #{target_path}/#{target_label}'
    else
      echo '=> WAS MOUNTED'
    fi
    "
  elsif request == 'u'
    system "
    if [[ -d #{target_path}/#{target_label} ]];
    then
      sudo umount '#{target_image}'
      sudo rm -rf #{target_path}/#{target_label}
      echo '=> UNMOUNTED'
    else
      echo '=> NOT MOUNTED'
    fi
    "
  else
    puts '=> WRONG REQUEST'
    exit
  end
end

# interface
begin
  if request
    mount_process(request, target_image)
  elsif target_image
    puts "
  Options:

    press m for mount
    press u for unmount
    "
    print '=> '
    request = gets.chomp

    mount_process(request, target_image)
  else
    puts "
  => YOU SHOULD ADD IMAGE AS ATTRIBUTE

  Example:

    $ imagemounter <image_name.iso>    (interactive)

    OR

    $ imagemounter <image_name.iso> m  (mounting)
    $ imagemounter <image_name.iso> u  (unmount)
    "
    exit
  end
rescue Interrupt
  puts "\b" * 2 + 'Exit...'
  exit
end
